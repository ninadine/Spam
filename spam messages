#!/usr/bin/env python
# coding: utf-8

# In[3]:


import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.metrics import r2_score, classification_report, confusion_matrix, accuracy_score, roc_auc_score, roc_curve, precision_recall_curve, average_precision_score
from sklearn.metrics import homogeneity_score, silhouette_score


# In[17]:


df=pd.read_csv('C:/Nadinedocs/autres/data/mail_data.csv')


# In[18]:


print(df)


# In[19]:


data=df.where((pd.notnull(df)),'')


# In[20]:


data.head()


# In[21]:


data.info()


# In[23]:


data.shape


# In[25]:


data.loc[data['Category'] == 'spam',"Category",] = 0
data.loc[data['Category'] == 'ham',"Category",] = 1


# In[32]:


X=data['Message']
Y=data['Category']


# In[33]:


print(X)


# In[34]:


print(Y)


# In[38]:


X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state = 3)


# In[40]:


print(X.shape)
print(X_train.shape)
print(X_test.shape)


# In[41]:


print(Y.shape)
print(Y_train.shape)
print(Y_test.shape)


# In[51]:


feature_extraction = TfidfVectorizer(min_df=1,stop_words='english', lowercase=True )
X_train_features = feature_extraction.fit_transform(X_train)
X_test_features=feature_extraction.transform(X_test)

Y_train=Y_train.astype('int')
Y_test=Y_test.astype('int')


# In[52]:


print(X_train)


# In[53]:


print(X_train_features)


# In[55]:


model=LogisticRegression()


# In[56]:


model.fit(X_train_features,Y_train)


# In[59]:


prediction_on_training_data=model.predict(X_train_features)
accuracy_on_training_data=accuracy_score(Y_train,prediction_on_training_data)


# In[61]:


print('Acc on training data: ', accuracy_on_training_data)


# In[63]:


prediction_on_test_data=model.predict(X_test_features)
accuracy_on_test_data=accuracy_score(Y_test,prediction_on_test_data)


# In[65]:


print('acc on test data : ', accuracy_on_test_data)
